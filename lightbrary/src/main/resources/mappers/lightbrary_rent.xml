<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
 "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.lightbrary.rent">

	<sql id="search">
		<choose>
        	<when test="searchOption == 'all'">
        		WHERE RENT_ROW.NAME LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'bookName'">
        		WHERE RENT_ROW.NAME LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'writer'">
        		WHERE RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'publish'">
        		WHERE RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'mname'">
        		WHERE RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'email'">
        		WHERE RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
        	</when>
        </choose>
	</sql>
	
	<resultMap type="com.lightbrary.rent.model.RentDto" 
		id="rentResultMap">
		
		<id column="NO" property="no"/>
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="BOOK_NO" property="bookNo"/>
		<result column="RESERVE_DATE" property="reserveDate" javaType="java.util.Date"/>
		<result column="RENT_DATE" property="rentDate" javaType="java.util.Date"/>
		<result column="EXPIRE_DATE" property="expireDate" javaType="java.util.Date"/>
		<result column="RETURN_DATE" property="returnDate" javaType="java.util.Date"/>
		<result column="OVERDUE_DAYS" property="overdueDays"/>
		<result column="PICKUP_DATE" property="pickUpDate" javaType="java.util.Date"/>
		<result column="SEND_FLAG" property="sendFlag"/>
		<result column="DEL_FLAG" property="delFlag"/>
		
		<result column="CATEGORY_CODE" property="bookCategoryCode"/>
		<result column="BOOK_NAME" property="bookName"/>
		<result column="WRITER" property="writer"/>
		<result column="PUBLISH" property="publish"/>
		<result column="PUBLISH_DATE" property="publishDate" javaType="java.util.Date"/>
		
		<result column="M_NAME" property="mname"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="ADDRESS" property="address"/>

		<result column="B_STATUS" property="bookStatus"/>
		
	</resultMap>
	
	
	<!--****************
			대출
	 **************** -->
	
	<!-- 대출 목록 -->
	<select id="selectRent" parameterType="map"
		resultMap="rentResultMap">
		SELECT *
		FROM(
			SELECT ROWNUM AS RNUM
			, RENT.NO AS NO, RENT.BOOK_NO AS BOOK_NO, RENT.NAME AS BOOK_NAME, RENT.WRITER AS WRITER, RENT.PUBLISH AS PUBLISH
			, RENT.M_NAME AS M_NAME, RENT.EMAIL AS EMAIL, RENT.PHONE AS PHONE, RENT.ADDRESS AS ADDRESS
			, RENT.B_STATUS AS B_STATUS, RENT.RESERVE_DATE, RENT.RETURN_DATE AS RETURN_DATE
			FROM (
			    SELECT RENT_ALL.NO AS NO, RENT_ALL.BOOK_NO AS BOOK_NO, RENT_ALL.NAME AS NAME, RENT_ALL.WRITER AS WRITER, RENT_ALL.PUBLISH AS PUBLISH
			    , RENT_ALL.M_NAME AS M_NAME, RENT_ALL.EMAIL AS EMAIL, RENT_ALL.PHONE AS PHONE, RENT_ALL.ADDRESS AS ADDRESS
			    , RENT_ALL.B_STATUS AS B_STATUS, RENT_ALL.RESERVE_DATE, RENT_ALL.RETURN_DATE AS RETURN_DATE
			    FROM (
			        SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.NAME AS NAME, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
			        , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
			        , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE
			        FROM (
			            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
			            , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS,
			            (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE, R.RETURN_DATE
			            FROM RENT R
			            JOIN MEMBER M
			            ON R.MEMBER_NO = M.NO
			            JOIN BOOK B
			            ON R.BOOK_NO = B.NO
			            <if test="status == 'statusAll'">
			            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
			            OR B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
			            </if>
			            <if test="status == 'statusRent'">
			            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
			            </if>
			            <if test="status == 'statusKeep'">
			            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
			            </if>
			         ) RENT_ROW
			         <include refid="search"></include>
			         ORDER BY RENT_ROW.RETURN_DATE DESC
			    ) RENT_ALL
			    ORDER BY RENT_ALL.B_STATUS ASC, RENT_ALL.RETURN_DATE DESC
			) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<select id="totalCountRent" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM(
			SELECT ROWNUM AS RNUM
			, RENT.NO AS NO, RENT.BOOK_NO AS BOOK_NO, RENT.NAME AS BOOK_NAME, RENT.WRITER AS WRITER, RENT.PUBLISH AS PUBLISH
			, RENT.M_NAME AS M_NAME, RENT.EMAIL AS EMAIL, RENT.PHONE AS PHONE, RENT.ADDRESS AS ADDRESS
			, RENT.B_STATUS AS B_STATUS, RENT.RESERVE_DATE, RENT.RETURN_DATE AS RETURN_DATE
			FROM (
			    SELECT RENT_ALL.NO AS NO, RENT_ALL.BOOK_NO AS BOOK_NO, RENT_ALL.NAME AS NAME, RENT_ALL.WRITER AS WRITER, RENT_ALL.PUBLISH AS PUBLISH
			    , RENT_ALL.M_NAME AS M_NAME, RENT_ALL.EMAIL AS EMAIL, RENT_ALL.PHONE AS PHONE, RENT_ALL.ADDRESS AS ADDRESS
			    , RENT_ALL.B_STATUS AS B_STATUS, RENT_ALL.RESERVE_DATE, RENT_ALL.RETURN_DATE AS RETURN_DATE
			    FROM (
			        SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.NAME AS NAME, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
			        , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
			        , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE
			        FROM (
			            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
			            , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS,
			            (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE, R.RETURN_DATE
			            FROM RENT R
			            JOIN MEMBER M
			            ON R.MEMBER_NO = M.NO
			            JOIN BOOK B
			            ON R.BOOK_NO = B.NO
			            <if test="status == 'statusAll'">
			            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
			            OR B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
			            </if>
			            <if test="status == 'statusRent'">
			            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
			            </if>
			            <if test="status == 'statusKeep'">
			            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
			            </if>
			         ) RENT_ROW
			         <include refid="search"></include>
			         ORDER BY RENT_ROW.RETURN_DATE DESC
			    ) RENT_ALL
			    ORDER BY RENT_ALL.B_STATUS ASC, RENT_ALL.RETURN_DATE DESC
			) RENT
		)
	</select>
	
	<!-- 대출 상세 start -->
	<select id="selectOneRent" parameterType="int"
		resultMap="rentResultMap">
		SELECT RENT_DETAIL.NO AS NO
		, RENT_DETAIL.BOOK_NO AS BOOK_NO, RENT_DETAIL.CATEGORY_CODE AS CATEGORY_CODE, RENT_DETAIL.BOOK_NAME AS BOOK_NAME
		, RENT_DETAIL.WRITER AS WRITER, RENT_DETAIL.PUBLISH AS PUBLISH, RENT_DETAIL.PUBLISH_DATE AS PUBLISH_DATE
		, RENT_DETAIL.M_NAME AS M_NAME, RENT_DETAIL.EMAIL AS EMAIL, RENT_DETAIL.PHONE AS PHONE, RENT_DETAIL.ADDRESS AS ADDRESS
		, RENT_DETAIL.B_STATUS AS B_STATUS
		, RENT_DETAIL.RESERVE_DATE, RENT_DETAIL.EXPIRE_DATE, RENT_DETAIL.RENT_DATE AS RENT_DATE, RENT_DETAIL.RETURN_DATE AS RETURN_DATE
		FROM (
		    SELECT R.NO AS NO
		    , B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		    , B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		    , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		    , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		    , R.RESERVE_DATE, R.EXPIRE_DATE AS EXPIRE_DATE, R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE
		    FROM RENT R
		    JOIN MEMBER M
		    ON R.MEMBER_NO = M.NO
		    JOIN BOOK B
		    ON R.BOOK_NO = B.NO
		    WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
		    OR B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
		) RENT_DETAIL
		WHERE RENT_DETAIL.NO = #{no}
	</select>
	<!-- //대출 상세 end -->
	
	<!-- 대출 상세에서 상태 변경 start -->
	<update id="updateOneRentStatus" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
		WHERE NO = #{bookNo}
	</update>
	<!-- //대출 상세에서 상태 변경 end -->
	
	
	<!--****************
			예약
	 **************** -->
	
	<!-- 예약 목록 start -->
	<select id="selectReserve" parameterType="map"
		resultMap="rentResultMap">
		SELECT *
		FROM (
		    SELECT ROWNUM AS RNUM
		    , RENT.NO AS NO, RENT.BOOK_NO AS BOOK_NO, RENT.NAME AS BOOK_NAME, RENT.WRITER AS WRITER, RENT.PUBLISH AS PUBLISH
		    , RENT.M_NAME AS M_NAME, RENT.EMAIL AS EMAIL, RENT.PHONE AS PHONE, RENT.ADDRESS AS ADDRESS
		    , RENT.B_STATUS AS B_STATUS, RENT.RESERVE_DATE, RENT.RETURN_DATE AS RETURN_DATE, RENT.RENT_DATE AS RENT_DATE, (RENT.RESERVE_DATE + 5) AS PICKUP_DATE
		    FROM (
		        SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.NAME AS NAME, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
		        , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
		        , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.RENT_DATE AS RENT_DATE
		        FROM (
		            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		            , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS,
		            (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE, R.RETURN_DATE AS RETURN_DATE, R.RENT_DATE AS RENT_DATE
		            FROM RENT R
		            JOIN MEMBER M
		            ON R.MEMBER_NO = M.NO
		            JOIN BOOK B
		            ON R.BOOK_NO = B.NO
		            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='예약')
		         ) RENT_ROW
		         <include refid="search"></include>
		         ORDER BY RENT_ROW.RESERVE_DATE DESC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	<!-- //예약 목록 end -->
	
	<!-- 예약 전체 수 start -->
	<select id="totalCountReserve" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM (
		    SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.NAME AS NAME, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
		    , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
		    , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE
		    FROM (
		        SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		        , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS,
		        (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE, R.RETURN_DATE
		        FROM RENT R
		        JOIN MEMBER M
		        ON R.MEMBER_NO = M.NO
		        JOIN BOOK B
		        ON R.BOOK_NO = B.NO
		        WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='예약')
		     ) RENT_ROW
		     <include refid="search"></include>
		)
	</select>
	<!-- //예약 전체 수 end -->
	
	<!-- 예약 전체 조회 (검색어/상태 없이) start -->
	<select id="selectReservebyStatus" parameterType="String" resultMap="rentResultMap">
		SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH,
	        (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE, R.RETURN_DATE
		FROM RENT R
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME=#{statusName})
	</select>
	<!-- //예약 전체 조회 (검색어/상태 없이) end -->
	
	<!-- 예약 상세 start -->
	<select id="selectOneReserve" parameterType="int"
		resultMap="rentResultMap">
		SELECT R.NO AS NO
		, B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		, R.RESERVE_DATE, R.RENT_DATE, R.RETURN_DATE
		FROM RENT R
		JOIN MEMBER M
		ON R.MEMBER_NO = M.NO
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='예약')
		AND R.NO = #{no}
	</select>
	<!-- //예약 상세 end -->
	
	<!-- 예약 상세에서 상태 변경 start -->
	<update id="updateOneReserveStatus" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
		WHERE NO = #{bookNo}
	</update>
	<!-- //예약 상세에서 상태 변경 end -->
	
	
	<!--****************
			
	 **************** -->
	
	<!-- 연체 목록 start -->
	<select id="selectOverdue" parameterType="map" resultMap="rentResultMap">
		SELECT *
		FROM (
		    SELECT ROWNUM AS RNUM
		    , RENT.NO AS NO, RENT.BOOK_NO AS BOOK_NO, RENT.NAME AS BOOK_NAME, RENT.WRITER AS WRITER, RENT.PUBLISH AS PUBLISH
		    , RENT.M_NAME AS M_NAME, RENT.EMAIL AS EMAIL, RENT.PHONE AS PHONE, RENT.ADDRESS AS ADDRESS
		    , RENT.B_STATUS AS B_STATUS, RENT.RESERVE_DATE, RENT.RETURN_DATE AS RETURN_DATE, RENT.EXPIRE_DATE AS EXPIRE_DATE, FLOOR(SYSDATE-EXPIRE_DATE) AS OVERDUE_DAYS
		    FROM (
		        SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.NAME AS NAME, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
		        , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
		        , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
		        FROM (
		            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		            , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS,
		            (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		            FROM RENT R
		            JOIN MEMBER M
		            ON R.MEMBER_NO = M.NO
		            JOIN BOOK B
		            ON R.BOOK_NO = B.NO
		            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='연체')
		         ) RENT_ROW
		         <include refid="search"></include>
		         ORDER BY EXPIRE_DATE ASC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	<!-- //연체 목록 end -->
	
	<!-- 연체 전체 수 start -->
	<select id="totalCountOverdue" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM (
		    SELECT ROWNUM AS RNUM
		    , RENT.NO AS NO, RENT.BOOK_NO AS BOOK_NO, RENT.NAME AS BOOK_NAME, RENT.WRITER AS WRITER, RENT.PUBLISH AS PUBLISH
		    , RENT.M_NAME AS M_NAME, RENT.EMAIL AS EMAIL, RENT.PHONE AS PHONE, RENT.ADDRESS AS ADDRESS
		    , RENT.B_STATUS AS B_STATUS, RENT.RESERVE_DATE, RENT.RETURN_DATE AS RETURN_DATE, RENT.EXPIRE_DATE AS EXPIRE_DATE, FLOOR(SYSDATE-RETURN_DATE) AS OVERDUE_DAYS
		    FROM (
		        SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.NAME AS NAME, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
		        , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
		        , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
		        FROM (
		            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		            , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS,
		            (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		            FROM RENT R
		            JOIN MEMBER M
		            ON R.MEMBER_NO = M.NO
		            JOIN BOOK B
		            ON R.BOOK_NO = B.NO
		            WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='연체')
		         ) RENT_ROW
		         <include refid="search"></include>
		    ) RENT
		)
	</select>
	<!-- //연체 전체 수 end -->
	
	<!-- 연체로 변경 start -->
	<update id="updateOneStatusToOverdue" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='연체')
		WHERE NO = #{bookNo}
	</update>
	<!-- //연체로 변경 end -->
	
	
	<!-- 연체 상세 start -->
	<select id="selectOneOverdue" parameterType="int" resultMap="rentResultMap">
		SELECT R.NO AS NO
		, B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		, R.RESERVE_DATE, R.RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE, FLOOR(SYSDATE-EXPIRE_DATE) AS OVERDUE_DAYS
		FROM RENT R
		JOIN MEMBER M
		ON R.MEMBER_NO = M.NO
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='연체')
		AND R.NO = #{no}
	</select>
	<!-- //연체 상세 end -->
	
	<!-- 연체 상세에서 상태 변경 start -->
	<update id="updateOneOverdueStatus" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
		WHERE NO = #{bookNo}
	</update>
	<!-- //연체 상세에서 상태 변경 end -->
	
	
	<select id="selectRentAll" resultMap="rentResultMap">
		SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		,(SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		FROM RENT R
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
	</select>
	
</mapper>