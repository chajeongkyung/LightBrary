<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
 "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.lightbrary.rent">

	<sql id="search">
		<choose>
        	<when test="searchOption == 'all'">
        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
        		OR RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'bookName'">
        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'writer'">
        		WHERE RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'publish'">
        		WHERE RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'mname'">
        		WHERE RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'email'">
        		WHERE RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
        	</when>
        </choose>
	</sql>
	
	<resultMap type="com.lightbrary.rent.model.RentDto" 
		id="rentResultMap">
		
		<id column="NO" property="no"/>
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="BOOK_NO" property="bookNo"/>
		<result column="RESERVE_DATE" property="reserveDate" javaType="java.util.Date"/>
		<result column="RENT_DATE" property="rentDate" javaType="java.util.Date"/>
		<result column="EXPIRE_DATE" property="expireDate" javaType="java.util.Date"/>
		<result column="RETURN_DATE" property="returnDate" javaType="java.util.Date"/>
		<result column="OVERDUE_DAYS" property="overdueDays"/>
		<result column="EXPIRE_DAYS" property="expireDays"/>
		<result column="PICKUP_DATE" property="pickUpDate" javaType="java.util.Date"/>
		<result column="RETURN_SEND_FLAG" property="returnSendFlag"/>
		<result column="OVERDUE_SEND_FLAG" property="overdueSendFlag"/>
		<result column="DEL_FLAG" property="delFlag"/>
		
		<result column="CATEGORY_CODE" property="bookCategoryCode"/>
		<result column="BOOK_NAME" property="bookName"/>
		<result column="WRITER" property="writer"/>
		<result column="PUBLISH" property="publish"/>
		<result column="PUBLISH_DATE" property="publishDate" javaType="java.util.Date"/>
		<result column="IMAGE_NAME" property="imageName"/>
		
		<result column="M_NAME" property="mname"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="ADDRESS" property="address"/>

		<result column="B_STATUS" property="bookStatus"/>
		<result column="RENT_STATUS" property="rentStatus"/>
		
		<result column="RNUM" property="rnum"/>
		
	</resultMap>
	
	
	<!-- 
	사용자 대출 예약
	 -->
	<insert id="insertReserve" parameterType="rentDto">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			SELECT RENT_NO_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO RENT
		VALUE(NO, MEMBER_NO, BOOK_NO, RESERVE_DATE)
		VALUES(RENT_NO_SEQ.NEXTVAL, #{memberNo}, #{bookNo}, SYSDATE)
	</insert>
	<update id="updateOneStatusToReserve" parameterType="int">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='예약')
		WHERE NO = #{bookNo}
	</update>
	
	<delete id="deleteOneFromRent" parameterType="int">
		DELETE FROM RENT
		WHERE NO = #{no}
	</delete>
	
		
	<!--
	사용자 나의 예약
	-->
	
	<!-- 나의 예약 목록  -->
	<select id="selectMyReserve" parameterType="map" resultMap="rentResultMap">
		SELECT *
		FROM (
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
		        , RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
		        , RENT_ROW.IMAGE_NAME AS IMAGE_NAME
		        , RENT_ROW.MEMBER_NO AS MEMBER_NO, RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL
		        , RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
		        , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
		        , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE
		        , (RENT_ROW.RESERVE_DATE + 5) AS PICKUP_DATE
		        FROM (
		            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		            , BI.STORED_FILE_NAME AS IMAGE_NAME
		            , M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		            , R.RENT_STATUS AS RENT_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		            , R.RENT_DATE AS RENT_DATE, R.EXPIRE_DATE AS EXPIRE_DATE, R.RETURN_DATE AS RETURN_DATE
		            FROM RENT R
		            JOIN MEMBER M
		            ON R.MEMBER_NO = M.NO
		            JOIN BOOK B
		            ON R.BOOK_NO = B.NO
		            JOIN BOOK_IMAGE BI
					ON B.IMAGE_NO = BI.NO
		            WHERE R.RENT_STATUS = '예약'
		            AND M.NO = #{myNo}
		         ) RENT_ROW
		         <choose>
		        	<when test="searchOption == 'all'">
		        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
		        		OR RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
		        		OR RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'bookName'">
		        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'writer'">
		        		WHERE RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'publish'">
		        		WHERE RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'mname'">
		        		WHERE RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'email'">
		        		WHERE RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
		        	</when>
		        </choose>
		        ORDER BY RENT_ROW.RESERVE_DATE DESC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 나의 예약 전체 수 -->
	<select id="totalCountMyReserve" resultType="int" parameterType="map">
		SELECT COUNT(*)
		FROM (
	        SELECT RENT_ROW.*
	        FROM (
	            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
	            , M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
	            , R.RENT_STATUS AS RENT_STATUS, R.RESERVE_DATE AS RESERVE_DATE
	            , R.RETURN_DATE AS RETURN_DATE, R.RENT_DATE AS RENT_DATE
	            FROM RENT R
	            JOIN MEMBER M
	            ON R.MEMBER_NO = M.NO
	            JOIN BOOK B
	            ON R.BOOK_NO = B.NO
	            WHERE R.RENT_STATUS = '예약'
	            AND M.NO = #{myNo}
	         ) RENT_ROW
	         <choose>
	        	<when test="searchOption == 'all'">
	        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
	        		OR RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
	        		OR RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
	        	</when>
	        	<when test="searchOption == 'bookName'">
	        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
	        	</when>
	        	<when test="searchOption == 'writer'">
	        		WHERE RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
	        	</when>
	        	<when test="searchOption == 'publish'">
	        		WHERE RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
	        	</when>
	        	<when test="searchOption == 'mname'">
	        		WHERE RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
	        	</when>
	        	<when test="searchOption == 'email'">
	        		WHERE RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
	        	</when>
	        </choose>
		)
	</select>
	
	<!--  -->
	<select id="selectMyReserveCurPage" parameterType="map" resultType="int">
		SELECT FLOOR((RNUM-1) / 10)+1 NO
		FROM (
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT RENT_ROW.*
		        FROM (
		            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		            , M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		            , R.RENT_STATUS AS RENT_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		            , R.RETURN_DATE AS RETURN_DATE, R.RENT_DATE AS RENT_DATE
		            FROM RENT R
		            JOIN MEMBER M
		            ON R.MEMBER_NO = M.NO
		            JOIN BOOK B
		            ON R.BOOK_NO = B.NO
		            WHERE R.RENT_STATUS = '예약'
		            AND M.NO = #{myNo}
		         ) RENT_ROW
		         <choose>
		        	<when test="searchOption == 'all'">
		        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
		        		OR RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
		        		OR RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'bookName'">
		        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'writer'">
		        		WHERE RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'publish'">
		        		WHERE RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'mname'">
		        		WHERE RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'email'">
		        		WHERE RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
		        	</when>
		        </choose>
		        ORDER BY RENT_ROW.RESERVE_DATE DESC
		    ) RENT
		)
		WHERE NO = #{no}
	</select>
	<!--  -->
	
	<!-- 나의 예약 상세 -->
	<select id="selectOneMyReserve" parameterType="int"
		resultMap="rentResultMap">
		SELECT R.NO AS NO
		, B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		, BI.STORED_FILE_NAME AS IMAGE_NAME
		, M.NO AS MEMEBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		, R.RENT_STATUS AS RENT_STATUS
		, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		, R.RESERVE_DATE, R.RENT_DATE, R.RETURN_DATE, (R.RESERVE_DATE + 5) AS PICKUP_DATE
		FROM RENT R
		JOIN MEMBER M
		ON R.MEMBER_NO = M.NO
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		JOIN BOOK_IMAGE BI
		ON B.IMAGE_NO = BI.NO
		AND R.NO = #{no}
	</select>
	
	
	<!--
	사용자 나의 대출
	-->
	
	<!-- 나의 대출 목록  -->
	<select id="selectMyRent" parameterType="map" resultMap="rentResultMap">
		SELECT *
		FROM (
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT RENT_ROW.*
		        FROM (
		        	SELECT RENT_MY.*
		        	FROM (
			            SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
			            , M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
			            , R.RENT_STATUS AS RENT_STATUS, R.RESERVE_DATE AS RESERVE_DATE
			            , R.RETURN_DATE AS RETURN_DATE, R.RENT_DATE AS RENT_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
			            , (R.EXPIRE_DATE - R.RENT_DATE) AS EXPIRE_DAYS
			            FROM RENT R
			            JOIN MEMBER M
			            ON R.MEMBER_NO = M.NO
			            JOIN BOOK B
			            ON R.BOOK_NO = B.NO
			            WHERE RENT_STATUS = '대출'
		                OR RENT_STATUS = '연체'
		            ) RENT_MY
		            WHERE RENT_MY.MEMBER_NO = #{myNo}
		        ) RENT_ROW
		        <choose>
		        	<when test="searchOption == 'all'">
		        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
		        		OR RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
		        		OR RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'bookName'">
		        		WHERE RENT_ROW.BOOK_NAME LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'writer'">
		        		WHERE RENT_ROW.WRITER LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'publish'">
		        		WHERE RENT_ROW.PUBLISH LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'mname'">
		        		WHERE RENT_ROW.M_NAME LIKE '%' || #{keyword} || '%'
		        	</when>
		        	<when test="searchOption == 'email'">
		        		WHERE RENT_ROW.EMAIL LIKE '%' || #{keyword} || '%'
		        	</when>
		        </choose>
		         ORDER BY RENT_ROW.RESERVE_DATE DESC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 나의 대출 전체 수 -->
	<select id="totalCountMyRent" resultType="int" parameterType="map">
		SELECT COUNT(*)
		FROM (
		    SELECT RENT_ROW.*
		    FROM (
		    	SELECT RENT_MY.*
		    	FROM (
			        SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
			        ,M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
			        ,R.RENT_STATUS AS RENT_STATUS, R.RESERVE_DATE, R.RETURN_DATE
			        FROM RENT R
			        JOIN MEMBER M
			        ON R.MEMBER_NO = M.NO
			        JOIN BOOK B
			        ON R.BOOK_NO = B.NO
			        WHERE RENT_STATUS = '대출'
	                OR RENT_STATUS = '연체'
	            ) RENT_MY
		        WHERE RENT_MY.MEMBER_NO = #{myNo}
		     ) RENT_ROW
		     <include refid="search"></include>
		)
	</select>
	
	<!--  -->
	<select id="selectMyRentCurPage" parameterType="map" resultType="int">
		SELECT FLOOR((RNUM-1) / 10)+1 NO
		FROM (
		    SELECT *
		    FROM (
		        SELECT ROWNUM AS RNUM, RENT.*
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME, RENT_ROW.WRITER AS WRITER
		            , RENT_ROW.PUBLISH AS PUBLISH, RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE
		            , RENT_ROW.ADDRESS AS ADDRESS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
		            , RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.RENT_DATE AS RENT_DATE
		            FROM (
		            	SELECT RENT_MY.*
		            	FROM (
			                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
			                , M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
			                , R.RENT_STATUS AS RENT_STATUS
			                , R.RESERVE_DATE AS RESERVE_DATE, R.RETURN_DATE AS RETURN_DATE, R.RENT_DATE AS RENT_DATE
			                FROM RENT R
			                JOIN MEMBER M
			                ON R.MEMBER_NO = M.NO
			                JOIN BOOK B
			                ON R.BOOK_NO = B.NO
			                WHERE RENT_STATUS = '대출'
			                OR RENT_STATUS = '연체'
			            ) RENT_MY
		                WHERE RENT_MY.MEMBER_NO = #{myNo}
		             ) RENT_ROW
		             <include refid="search"></include>
		             ORDER BY RENT_ROW.RESERVE_DATE DESC
		        ) RENT
		    )
		)
		WHERE NO = #{no}
	</select>
	<!--  -->
	
	<!-- 나의 대출 상세 -->
	<select id="selectOneMyRent" parameterType="int"
		resultMap="rentResultMap">
		SELECT R.NO AS NO
		, B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		, M.NO AS MEMEBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		, R.RESERVE_DATE, R.RENT_DATE, R.RETURN_DATE, R.EXPIRE_DATE, TRUNC(R.EXPIRE_DATE - R.RENT_DATE) AS EXPIRE_DAYS
		FROM RENT R
		JOIN MEMBER M
		ON R.MEMBER_NO = M.NO
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE R.NO = #{no}
	</select>
	
	<!-- 반납일 연장 -->
	<update id="extendReturnDate" parameterType="int">
		UPDATE RENT
		SET
		EXPIRE_DATE = EXPIRE_DATE + 3
		WHERE NO = #{no}
	</update>
	
	
	<!--
	관리자 예약 관리
	-->
	
	<!-- 예약 목록 -->
	<select id="selectReserve" parameterType="map"
		resultMap="rentResultMap">
		SELECT *
		FROM(
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, (RENT_ROW.RESERVE_DATE + 5) AS PICKUP_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RETURN_SEND_FLAG AS RETURN_SEND_FLAG, RENT_ROW.RENT_STATUS AS RENT_STATUS
		            FROM (
		                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		                , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		                , R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		                , R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG, R.RENT_STATUS AS RENT_STATUS
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                WHERE RENT_STATUS = '예약'
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ALL
		        ORDER BY RENT_ALL.PICKUP_DATE DESC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 예약 전체 수  -->
	<select id="totalCountReserve" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM(
            SELECT *
            FROM (
                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
                , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
                , R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
                , R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG, R.RENT_STATUS AS RENT_STATUS
                FROM RENT R
                JOIN MEMBER M
                ON R.MEMBER_NO = M.NO
                JOIN BOOK B
                ON R.BOOK_NO = B.NO
                WHERE RENT_STATUS = '예약'
             ) RENT_ROW
             <include refid="search"></include>
		)
	</select>
	
	<!--  -->
	<select id="selectReserveCurPage" parameterType="map" resultType="int">
		SELECT FLOOR((RNUM-1) / 10)+1 NO
		FROM (
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE, (RENT_ROW.RESERVE_DATE + 5) AS PICKUP_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RETURN_SEND_FLAG AS RETURN_SEND_FLAG, RENT_ROW.RENT_STATUS AS RENT_STATUS
		            FROM (
		                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		                , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		                , R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		                , R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG, R.RENT_STATUS AS RENT_STATUS
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                WHERE RENT_STATUS = '예약'
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ALL
		        ORDER BY RENT_ALL.PICKUP_DATE
		    ) RENT
		)
		WHERE NO = #{no}
	</select>
	<!--  -->
	
	<!-- 예약 전체 조회 (검색어/상태 없이) start -->
	<select id="selectReservebyStatus" parameterType="String" resultMap="rentResultMap">
		SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
	    , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE, R.RETURN_DATE
	    , (R.RESERVE_DATE + 5) AS PICKUP_DATE
		FROM RENT R
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME=#{statusName})
	</select>
	<!-- //예약 전체 조회 (검색어/상태 없이) end -->
	
	<!-- 예약 상세 start -->
	<select id="selectOneReserve" parameterType="int"
		resultMap="rentResultMap">
		SELECT R.NO AS NO
		, B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		, R.RENT_STATUS AS RENT_STATUS, R.RESERVE_DATE AS RESERVE_DATE, R.RENT_DATE AS RENT_DATE
		, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		, (R.RESERVE_DATE + 5) AS PICKUP_DATE
		FROM RENT R
		JOIN MEMBER M
		ON R.MEMBER_NO = M.NO
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		AND R.NO = #{no}
	</select>
	
	
	<!-- 
	대출 처리
	 -->
	
	<!-- 대출중으로 도서 상태 변경 -->
	<update id="updateOneStatusToRent" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='대출')
		WHERE NO = #{bookNo}
	</update>
	
	<!-- 대출중으로 대출 상태 변경 start -->
	<update id="updateOneStatusToRentFromRent" parameterType="rentDto">
		UPDATE RENT
		SET
		RENT_STATUS = '대출'
		WHERE NO = #{no}
	</update>
	
	<!-- 대출 날짜 오늘로 변경 start -->
	<update id="updateOneRentDate" parameterType="rentDto">
		UPDATE RENT
		SET
		RENT_DATE = SYSDATE
		WHERE NO = #{no}
	</update>
	
	<!-- 반납일 수정 start -->
	<update id="updateOneExpireDate" parameterType="rentDto">
		UPDATE RENT
		SET
		EXPIRE_DATE = SYSDATE + 7
		WHERE NO = #{no}
	</update>
	<!-- //반납일 수정 end -->
	
	
	<!--
	관리자 대출 관리
	-->
	
	<!-- 대출 목록 -->
	<select id="selectRent" parameterType="map"
		resultMap="rentResultMap">
		SELECT *
		FROM(
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		            FROM (
		                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		                , R.RENT_STATUS AS RENT_STATUS, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		                , R.RESERVE_DATE AS RESERVE_DATE, R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE
		                , R.EXPIRE_DATE AS EXPIRE_DATE, R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                <if test="status == 'statusAll'">
		                WHERE RENT_STATUS = '대출'
		                OR RENT_STATUS = '보관'
		                </if>
		                <if test="status == 'statusRent'">
		                WHERE RENT_STATUS = '대출'
		                </if>
		                <if test="status == 'statusKeep'">
		                WHERE RENT_STATUS = '보관'
		                </if>
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ALL
		        ORDER BY RENT_ALL.RENT_STATUS ASC, RENT_ALL.EXPIRE_DATE DESC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<select id="totalCountRent" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM(
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		            FROM (
		                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		                , R.RENT_STATUS AS RENT_STATUS, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		                , R.RESERVE_DATE AS RESERVE_DATE, R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE
		                , R.EXPIRE_DATE AS EXPIRE_DATE, R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                <if test="status == 'statusAll'">
		                WHERE RENT_STATUS = '대출'
		                OR RENT_STATUS = '보관'
		                </if>
		                <if test="status == 'statusRent'">
		                WHERE RENT_STATUS = '대출'
		                </if>
		                <if test="status == 'statusKeep'">
		                WHERE RENT_STATUS = '보관'
		                </if>
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ALL
		        ORDER BY RENT_ALL.RENT_STATUS ASC, RENT_ALL.EXPIRE_DATE DESC
		    ) RENT
		)
	</select>
	
	<!--  -->
	<select id="selectRentCurPage" parameterType="map" resultType="int">
		SELECT FLOOR((RNUM-1) / 10)+1 NO
		FROM (
			SELECT ROWNUM AS RNUM, RENT_ALL.*
			FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
			        FROM (
			                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
			                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
			                , R.RENT_STATUS AS RENT_STATUS, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
			                , R.RESERVE_DATE AS RESERVE_DATE, R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE
			                , R.EXPIRE_DATE AS EXPIRE_DATE, R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                <if test="status == 'statusAll'">
		                WHERE RENT_STATUS = '대출'
		                OR RENT_STATUS = '보관'
		                </if>
		                <if test="status == 'statusRent'">
		                WHERE RENT_STATUS = '대출'
		                </if>
		                <if test="status == 'statusKeep'">
		                WHERE RENT_STATUS = '보관'
		                </if>
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ORDER
		        ORDER BY RENT_ORDER.RENT_STATUS ASC, RENT_ORDER.EXPIRE_DATE DESC
		    ) RENT_ALL
		)
		WHERE NO = #{no}
	</select>
	<!--  -->
	
	<!-- 대출 상세 -->
	<select id="selectOneRent" parameterType="int"
		resultMap="rentResultMap">
		SELECT RENT_DETAIL.NO AS NO
		, RENT_DETAIL.BOOK_NO AS BOOK_NO, RENT_DETAIL.CATEGORY_CODE AS CATEGORY_CODE, RENT_DETAIL.BOOK_NAME AS BOOK_NAME
		, RENT_DETAIL.WRITER AS WRITER, RENT_DETAIL.PUBLISH AS PUBLISH, RENT_DETAIL.PUBLISH_DATE AS PUBLISH_DATE
		, RENT_DETAIL.IMAGE_NAME AS IMAGE_NAME
		, RENT_DETAIL.MEMBER_NO AS MEMBER_NO, RENT_DETAIL.M_NAME AS M_NAME, RENT_DETAIL.EMAIL AS EMAIL, RENT_DETAIL.PHONE AS PHONE
		, RENT_DETAIL.RENT_STATUS AS RENT_STATUS, RENT_DETAIL.ADDRESS AS ADDRESS, RENT_DETAIL.B_STATUS AS B_STATUS
		, RENT_DETAIL.RESERVE_DATE, RENT_DETAIL.EXPIRE_DATE
		, RENT_DETAIL.RENT_DATE AS RENT_DATE, RENT_DETAIL.RETURN_DATE AS RETURN_DATE
		, RENT_DETAIL.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		FROM (
		    SELECT R.NO AS NO
		    , B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		    , B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		    , BI.STORED_FILE_NAME AS IMAGE_NAME
		    , M.NO AS MEMBER_NO, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		    , R.RENT_STATUS AS RENT_STATUS, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		    , R.RESERVE_DATE, R.EXPIRE_DATE AS EXPIRE_DATE, R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE
		    , R.RETURN_SEND_FLAG AS RETURN_SEND_FLAG
		    FROM RENT R
		    JOIN MEMBER M
		    ON R.MEMBER_NO = M.NO
		    JOIN BOOK B
		    ON R.BOOK_NO = B.NO
		    JOIN BOOK_IMAGE BI
		    ON B.IMAGE_NO = BI.NO
		) RENT_DETAIL
		WHERE RENT_DETAIL.NO = #{no}
	</select>
	
	<!-- 보관중으로 상태 변경 -->
	<update id="updateOneStatusToKeep" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='보관')
		WHERE NO = #{bookNo}
	</update>
	
	<!-- 반납처리 반납일 수정 -->
	<update id="updateOneReturnDate" parameterType="rentDto">
		UPDATE RENT
		SET
		RETURN_DATE = SYSDATE
		WHERE NO = #{no}
	</update>
	
	<!-- 대출 이메일 상태 변경 -->
	<update id="updateSend" parameterType="rentDto">
		UPDATE RENT
		SET
		RETURN_SEND_FLAG = 'Y'
		WHERE NO = #{no}
	</update>
	
	
	<!--
	연체
	 -->
	
	<!-- 연체 목록 -->
	<select id="selectOverdue" parameterType="map"
		resultMap="rentResultMap">
		SELECT *
		FROM(
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.OVERDUE_SEND_FLAG AS OVERDUE_SEND_FLAG
	                , TRUNC(SYSDATE - RENT_ROW.EXPIRE_DATE) AS OVERDUE_DAYS
		            FROM (
		                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		                , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		                , R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		                , R.RENT_STATUS AS RENT_STATUS, R.OVERDUE_SEND_FLAG AS OVERDUE_SEND_FLAG
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                WHERE RENT_STATUS = '연체'
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ALL
		        ORDER BY RENT_ALL.EXPIRE_DATE ASC
		    ) RENT
		)
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 연체 전체 수  -->
	<select id="totalCountOverdue" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM(
            SELECT *
	        FROM (
	            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
                , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
                , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.OVERDUE_SEND_FLAG AS OVERDUE_SEND_FLAG
                , TRUNC(SYSDATE - RENT_ROW.EXPIRE_DATE) AS OVERDUE_DAYS
	            FROM (
	                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
	                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
	                , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
	                , R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
	                , R.RENT_STATUS AS RENT_STATUS, R.OVERDUE_SEND_FLAG AS OVERDUE_SEND_FLAG
	                FROM RENT R
	                JOIN MEMBER M
	                ON R.MEMBER_NO = M.NO
	                JOIN BOOK B
	                ON R.BOOK_NO = B.NO
	                WHERE RENT_STATUS = '연체'
	             ) RENT_ROW
	             <include refid="search"></include>
	        ) RENT_ALL
	        ORDER BY RENT_ALL.EXPIRE_DATE ASC
		)
	</select>
	
	<!--  -->
	<select id="selectOverdueCurPage" parameterType="map" resultType="int">
		SELECT FLOOR((RNUM-1) / 10)+1 NO
		FROM (
		    SELECT ROWNUM AS RNUM, RENT.*
		    FROM (
		        SELECT *
		        FROM (
		            SELECT RENT_ROW.NO AS NO, RENT_ROW.BOOK_NO AS BOOK_NO, RENT_ROW.BOOK_NAME AS BOOK_NAME
	            	, RENT_ROW.WRITER AS WRITER, RENT_ROW.PUBLISH AS PUBLISH
	                , RENT_ROW.M_NAME AS M_NAME, RENT_ROW.EMAIL AS EMAIL, RENT_ROW.PHONE AS PHONE, RENT_ROW.ADDRESS AS ADDRESS
	                , RENT_ROW.B_STATUS AS B_STATUS, RENT_ROW.RESERVE_DATE AS RESERVE_DATE
	                , RENT_ROW.RENT_DATE AS RENT_DATE, RENT_ROW.RETURN_DATE AS RETURN_DATE, RENT_ROW.EXPIRE_DATE AS EXPIRE_DATE
	                , RENT_ROW.RENT_STATUS AS RENT_STATUS, RENT_ROW.OVERDUE_SEND_FLAG AS OVERDUE_SEND_FLAG
	                , TRUNC(SYSDATE - RENT_ROW.EXPIRE_DATE) AS OVERDUE_DAYS
		            FROM (
		                SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS BOOK_NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		                , M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		                , (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS, R.RESERVE_DATE AS RESERVE_DATE
		                , R.RENT_DATE AS RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		                , R.RENT_STATUS AS RENT_STATUS, R.OVERDUE_SEND_FLAG AS OVERDUE_SEND_FLAG
		                FROM RENT R
		                JOIN MEMBER M
		                ON R.MEMBER_NO = M.NO
		                JOIN BOOK B
		                ON R.BOOK_NO = B.NO
		                WHERE RENT_STATUS = '연체'
		             ) RENT_ROW
		             <include refid="search"></include>
		        ) RENT_ALL
		        ORDER BY RENT_ALL.EXPIRE_DATE ASC
		    ) RENT
		)
		WHERE NO = #{no}
	</select>
	<!--  -->
	
	<!-- 도서 연체로 변경 -->
	<update id="updateOneStatusToOverdue" parameterType="rentDto">
		UPDATE BOOK
		SET
		STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='연체')
		WHERE NO = #{bookNo}
	</update>
	
	<!-- 대출 연체로 변경 -->
	<update id="updateOneStatusToOverdueFromRent" parameterType="rentDto">
		UPDATE RENT
		SET
		RENT_STATUS = '연체'
		WHERE NO = #{no}
	</update>
	
	
	<!-- 연체 상세 start -->
	<select id="selectOneOverdue" parameterType="int" resultMap="rentResultMap">
		SELECT R.NO AS NO
		, B.NO AS BOOK_NO, B.CATEGORY_CODE AS CATEGORY_CODE, B.NAME AS BOOK_NAME
		, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH, B.PUBLISH_DATE AS PUBLISH_DATE
		, M.NAME AS M_NAME, M.EMAIL AS EMAIL, M.PHONE AS PHONE, M.ADDRESS AS ADDRESS
		, R.RENT_STATUS AS RENT_STATUS
		, (SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		, R.RESERVE_DATE, R.RENT_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE
		, FLOOR(SYSDATE-EXPIRE_DATE) AS OVERDUE_DAYS
		, R.OVERDUE_SEND_FLAG
		FROM RENT R
		JOIN MEMBER M
		ON R.MEMBER_NO = M.NO
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE B.STATUS_CODE = (SELECT CODE FROM BOOK_STATUS WHERE NAME='연체')
		AND R.NO = #{no}
	</select>
	<!-- //연체 상세 end -->
	
	<!-- 연체로 업데이트 하기 위한 대출 목록 불러오기 start -->
	<select id="selectRentAll" resultMap="rentResultMap">
		SELECT R.NO AS NO, R.BOOK_NO AS BOOK_NO, B.NAME AS NAME, B.WRITER AS WRITER, B.PUBLISH AS PUBLISH
		,(SELECT NAME FROM BOOK_STATUS BS WHERE B.STATUS_CODE = BS.CODE) AS B_STATUS
		, R.RENT_STATUS AS RENT_STATUS
		, R.RESERVE_DATE AS RESERVE_DATE, R.RETURN_DATE AS RETURN_DATE, R.EXPIRE_DATE AS EXPIRE_DATE
		FROM RENT R
		JOIN BOOK B
		ON R.BOOK_NO = B.NO
		WHERE R.RENT_STATUS = '대출'
	</select>
	<!-- //연체로 업데이트 하기 위한 대출 목록 불러오기 end -->
	
	<!-- 대출 이메일 상태 변경 start -->
	<update id="updateOverdueSend" parameterType="rentDto">
		UPDATE RENT
		SET
		OVERDUE_SEND_FLAG = 'Y'
		WHERE NO = #{no}
	</update>
	<!-- //대출 이메일 상태 변경 end -->
	
	
	
	
	
	<!-- 보관중으로 대출 상태 변경 -->
	<update id="updateOneStatusToKeepFromRent" parameterType="rentDto">
		UPDATE RENT
		SET
		RENT_STATUS = '보관'
		WHERE NO = #{no}
	</update>
	
	
</mapper>